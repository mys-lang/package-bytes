class BytesReaderError(Error):
    pass

class BytesReader:
    _data: bytes
    _pos: i64

    func __init__(self, data: bytes):
        self._data = data
        self._pos = 0

    func available(self) -> bool:
        return self._pos < i64(len(self._data))

    func read_u8(self) -> u8:
        if not self.available():
            raise BytesReaderError()

        value = self._data[self._pos]
        self._pos += 1

        return value

    func read_u16(self) -> u16:
        return (u16(self.read_u8()) << 8) | u16(self.read_u8())

    func read_u32(self) -> u32:
        return (u32(self.read_u16()) << 16) | u32(self.read_u16())

    func read_u64(self) -> u64:
        return (u64(self.read_u32()) << 32) | u64(self.read_u32())

    func read_i8(self) -> i8:
        return i8(self.read_u8())

    func read_i16(self) -> i16:
        return i16(self.read_u16())

    func read_i32(self) -> i32:
        return i32(self.read_u32())

    func read_i64(self) -> i64:
        return i64(self.read_u64())

    func read_bytes(self, count: i64) -> bytes:
        data = b""

        for _ in range(count):
            data += self.read_u8()

        return data

@test
func test_read_unsigned():
    reader = BytesReader(
        b"\x12\x34\x56\x78\x9a\xbc\xde\x01\x23\x45\x67\x89\xab\xcd\xef")
    assert reader.read_u8() == u8(0x12)
    assert reader.read_u16() == u16(0x3456)
    assert reader.read_u32() == u32(0x789abcde)
    assert reader.read_u64() == u64(0x0123456789abcdef)

@test
func test_read_signed():
    reader = BytesReader(
        b"\x12\x34\x56\x78\x9a\xbc\xde\x01\x23\x45\x67\x89\xab\xcd\xef")
    assert reader.read_i8() == i8(0x12)
    assert reader.read_i16() == i16(0x3456)
    assert reader.read_i32() == i32(0x789abcde)
    assert reader.read_i64() == i64(0x0123456789abcdef)

@test
func test_read_bytes():
    reader = BytesReader(b"\x12\x34\x56\x78\x9a\xbc\xde")
    assert reader.read_bytes(2) == b"\x12\x34"
    assert reader.read_bytes(3) == b"\x56\x78\x9a"
    assert reader.read_bytes(0) == b""
    assert reader.read_bytes(1) == b"\xbc"
